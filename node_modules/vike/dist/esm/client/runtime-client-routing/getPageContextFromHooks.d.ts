export { getPageContextFromHooks_isHydration };
export { getPageContextFromHooks_serialized };
export { getPageContextFromServerHooks };
export { getPageContextFromClientHooks };
export { setPageContextInitIsPassedToClient };
export { execHookClient };
export type { PageContextFromServerHooks };
import type { PageContextConfig, PageFile } from '../../shared/getPageFiles.js';
import type { HookName } from '../../types/Config.js';
import type { PageContextCreated } from './createPageContextClientSide.js';
import type { PageContextBegin } from './renderPageClientSide.js';
import { type PageContextForPublicUsageClient } from './preparePageContextForPublicUsageClient.js';
type PageContextSerialized = {
    pageId: string;
    _hasPageContextFromServer: true;
};
declare function getPageContextFromHooks_serialized(): PageContextSerialized & {
    routeParams: Record<string, string>;
    _hasPageContextFromServer: true;
};
declare function getPageContextFromHooks_isHydration(pageContext: PageContextSerialized & PageContextBegin & PageContextConfig & {
    _hasPageContextFromServer: true;
} & PageContextForPublicUsageClient): Promise<PageContextSerialized & {
    _isOriginalObject: true;
    isPageContext: true;
} & {
    isClientSide: true;
    isPrerendering: false;
    urlOriginal: string;
    _globalContext: {
        _globalConfigPublic: {
            pages: {
                [k: string]: {
                    config: import("../../types/index.js").ConfigResolved;
                    _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                    _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                    _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
                } & ({
                    route: import("../../types/Config.js").Route;
                    isErrorPage?: undefined;
                } | {
                    route?: undefined;
                    isErrorPage: true;
                });
            };
            config: import("../../types/index.js").ConfigResolved;
            _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        };
        pages: {
            [k: string]: {
                config: import("../../types/index.js").ConfigResolved;
                _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
            } & ({
                route: import("../../types/Config.js").Route;
                isErrorPage?: undefined;
            } | {
                route?: undefined;
                isErrorPage: true;
            });
        };
        config: import("../../types/index.js").ConfigResolved;
        _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        isGlobalContext: true;
        _isOriginalObject: true;
        _virtualFileExportsGlobalEntry: unknown;
        _pageFilesAll: PageFile[];
        _pageConfigs: import("../../types/PageConfig.js").PageConfigRuntime[];
        _pageConfigGlobal: import("../../types/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
    } & {
        isClientSide: true;
    } & {
        _pageRoutes: import("../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    };
    _pageFilesAll: PageFile[];
    _urlHandler: null;
    _urlRewrite: null | string;
    _baseServer: string;
} & {
    urlParsed: import("./utils.js").UrlPublic;
    urlPathname: string;
    url: string;
} & import("../../shared/page-configs/resolveVikeConfigPublic.js").GlobalConfigPublic & {
    isBackwardNavigation: boolean | null;
    isClientSideNavigation: boolean;
    isHydration: boolean;
    previousPageContext: ({
        pageId: string;
    } & PageContextConfig & {
        pageId: string;
        routeParams: Record<string, string>;
    } & import("../../shared/preparePageContextForPublicUsage.js").PageContextPrepareMinimum & import("../../types/PageContext.js").PageContextInternalClient & Omit<Partial<PageContextConfig & {
        isPageContext: true;
        Page: import("../../types/Config.js").Config["Page"];
        routeParams: Record<string, string>;
        data: unknown;
        urlOriginal: string;
        headers: Record<string, string> | null;
        headersOriginal?: unknown;
        headersResponse: Headers;
        is404: boolean | null;
        isClientSideNavigation: boolean;
        abortReason?: unknown;
        abortStatusCode?: import("../../shared/route/abort.js").AbortStatusCode;
        errorWhileRendering?: unknown;
        pageId: string | null;
        from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        url: string;
        pageExports: Record<string, unknown>;
        isBaseMissing?: true;
    }> & Pick<PageContextConfig & {
        isPageContext: true;
        Page: import("../../types/Config.js").Config["Page"];
        routeParams: Record<string, string>;
        data: unknown;
        urlOriginal: string;
        headers: Record<string, string> | null;
        headersOriginal?: unknown;
        headersResponse: Headers;
        is404: boolean | null;
        isClientSideNavigation: boolean;
        abortReason?: unknown;
        abortStatusCode?: import("../../shared/route/abort.js").AbortStatusCode;
        errorWhileRendering?: unknown;
        pageId: string | null;
        from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        url: string;
        pageExports: Record<string, unknown>;
        isBaseMissing?: true;
    }, "exports" | "pageId" | "pageExports" | "config" | "Page" | "data" | "source" | "sources" | "from" | "configEntries" | "exportsAll" | "routeParams" | "abortReason"> & {
        isClientSide: true;
        isPrerendering: false;
    } & {
        isHydration: boolean;
        isBackwardNavigation: boolean | null;
        previousPageContext: import("../../types/PageContext.js").PageContextClient<unknown> | null;
        globalContext: import("./getGlobalContextClientInternal.js").GlobalContextClient;
    } & {
        urlOriginal: string;
    } & {
        urlParsed: import("./utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    }, ("globalContext" | "Page" | "data") | "previousPageContext"> & {
        previousPageContext: {
            pageId: string;
        } | null;
    } & {
        urlOriginal: string;
    }) | null;
} & PageContextConfig & {
    _hasPageContextFromServer: true;
} & import("../../shared/preparePageContextForPublicUsage.js").PageContextPrepareMinimum & Omit<Partial<PageContextConfig & {
    isPageContext: true;
    Page: import("../../types/Config.js").Config["Page"];
    routeParams: Record<string, string>;
    data: unknown;
    urlOriginal: string;
    headers: Record<string, string> | null;
    headersOriginal?: unknown;
    headersResponse: Headers;
    is404: boolean | null;
    isClientSideNavigation: boolean;
    abortReason?: unknown;
    abortStatusCode?: import("../../shared/route/abort.js").AbortStatusCode;
    errorWhileRendering?: unknown;
    pageId: string | null;
    from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
    source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
    sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
    url: string;
    pageExports: Record<string, unknown>;
    isBaseMissing?: true;
}> & Pick<PageContextConfig & {
    isPageContext: true;
    Page: import("../../types/Config.js").Config["Page"];
    routeParams: Record<string, string>;
    data: unknown;
    urlOriginal: string;
    headers: Record<string, string> | null;
    headersOriginal?: unknown;
    headersResponse: Headers;
    is404: boolean | null;
    isClientSideNavigation: boolean;
    abortReason?: unknown;
    abortStatusCode?: import("../../shared/route/abort.js").AbortStatusCode;
    errorWhileRendering?: unknown;
    pageId: string | null;
    from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
    source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
    sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
    url: string;
    pageExports: Record<string, unknown>;
    isBaseMissing?: true;
}, "exports" | "pageId" | "pageExports" | "config" | "Page" | "data" | "source" | "sources" | "from" | "configEntries" | "exportsAll" | "routeParams" | "abortReason"> & {
    isClientSide: true;
    isPrerendering: false;
} & {
    isHydration: boolean;
    isBackwardNavigation: boolean | null;
    previousPageContext: import("../../types/PageContext.js").PageContextClient<unknown> | null;
    globalContext: import("./getGlobalContextClientInternal.js").GlobalContextClient;
} & {
    urlOriginal: string;
} & {
    urlParsed: import("./utils.js").UrlPublic;
    urlPathname: string;
    url: string;
}, ("globalContext" | "Page" | "data") | "previousPageContext"> & {
    previousPageContext: {
        pageId: string;
    } | null;
} & {
    urlOriginal: string;
}>;
type PageContextFromServerHooks = {
    _hasPageContextFromServer: boolean;
};
declare function getPageContextFromServerHooks(pageContext: {
    pageId: string;
} & PageContextCreated, isErrorPage: boolean): Promise<{
    is404ServerSideRouted: true;
} | {
    is404ServerSideRouted?: undefined;
    pageContextFromServerHooks: PageContextFromServerHooks;
}>;
declare function getPageContextFromClientHooks(pageContext: {
    pageId: string;
    _hasPageContextFromServer: boolean;
} & PageContextBegin & PageContextConfig & PageContextForPublicUsageClient, isErrorPage: boolean): Promise<{
    pageId: string;
    _hasPageContextFromServer: boolean;
} & {
    _isOriginalObject: true;
    isPageContext: true;
} & {
    isClientSide: true;
    isPrerendering: false;
    urlOriginal: string;
    _globalContext: {
        _globalConfigPublic: {
            pages: {
                [k: string]: {
                    config: import("../../types/index.js").ConfigResolved;
                    _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                    _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                    _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
                } & ({
                    route: import("../../types/Config.js").Route;
                    isErrorPage?: undefined;
                } | {
                    route?: undefined;
                    isErrorPage: true;
                });
            };
            config: import("../../types/index.js").ConfigResolved;
            _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        };
        pages: {
            [k: string]: {
                config: import("../../types/index.js").ConfigResolved;
                _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
            } & ({
                route: import("../../types/Config.js").Route;
                isErrorPage?: undefined;
            } | {
                route?: undefined;
                isErrorPage: true;
            });
        };
        config: import("../../types/index.js").ConfigResolved;
        _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        isGlobalContext: true;
        _isOriginalObject: true;
        _virtualFileExportsGlobalEntry: unknown;
        _pageFilesAll: PageFile[];
        _pageConfigs: import("../../types/PageConfig.js").PageConfigRuntime[];
        _pageConfigGlobal: import("../../types/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
    } & {
        isClientSide: true;
    } & {
        _pageRoutes: import("../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    };
    _pageFilesAll: PageFile[];
    _urlHandler: null;
    _urlRewrite: null | string;
    _baseServer: string;
} & {
    urlParsed: import("./utils.js").UrlPublic;
    urlPathname: string;
    url: string;
} & import("../../shared/page-configs/resolveVikeConfigPublic.js").GlobalConfigPublic & {
    isBackwardNavigation: boolean | null;
    isClientSideNavigation: boolean;
    isHydration: boolean;
    previousPageContext: ({
        pageId: string;
    } & PageContextConfig & {
        pageId: string;
        routeParams: Record<string, string>;
    } & import("../../shared/preparePageContextForPublicUsage.js").PageContextPrepareMinimum & import("../../types/PageContext.js").PageContextInternalClient & Omit<Partial<PageContextConfig & {
        isPageContext: true;
        Page: import("../../types/Config.js").Config["Page"];
        routeParams: Record<string, string>;
        data: unknown;
        urlOriginal: string;
        headers: Record<string, string> | null;
        headersOriginal?: unknown;
        headersResponse: Headers;
        is404: boolean | null;
        isClientSideNavigation: boolean;
        abortReason?: unknown;
        abortStatusCode?: import("../../shared/route/abort.js").AbortStatusCode;
        errorWhileRendering?: unknown;
        pageId: string | null;
        from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        url: string;
        pageExports: Record<string, unknown>;
        isBaseMissing?: true;
    }> & Pick<PageContextConfig & {
        isPageContext: true;
        Page: import("../../types/Config.js").Config["Page"];
        routeParams: Record<string, string>;
        data: unknown;
        urlOriginal: string;
        headers: Record<string, string> | null;
        headersOriginal?: unknown;
        headersResponse: Headers;
        is404: boolean | null;
        isClientSideNavigation: boolean;
        abortReason?: unknown;
        abortStatusCode?: import("../../shared/route/abort.js").AbortStatusCode;
        errorWhileRendering?: unknown;
        pageId: string | null;
        from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        url: string;
        pageExports: Record<string, unknown>;
        isBaseMissing?: true;
    }, "exports" | "pageId" | "pageExports" | "config" | "Page" | "data" | "source" | "sources" | "from" | "configEntries" | "exportsAll" | "routeParams" | "abortReason"> & {
        isClientSide: true;
        isPrerendering: false;
    } & {
        isHydration: boolean;
        isBackwardNavigation: boolean | null;
        previousPageContext: import("../../types/PageContext.js").PageContextClient<unknown> | null;
        globalContext: import("./getGlobalContextClientInternal.js").GlobalContextClient;
    } & {
        urlOriginal: string;
    } & {
        urlParsed: import("./utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    }, ("globalContext" | "Page" | "data") | "previousPageContext"> & {
        previousPageContext: {
            pageId: string;
        } | null;
    } & {
        urlOriginal: string;
    }) | null;
} & PageContextConfig & import("../../shared/preparePageContextForPublicUsage.js").PageContextPrepareMinimum & Omit<Partial<PageContextConfig & {
    isPageContext: true;
    Page: import("../../types/Config.js").Config["Page"];
    routeParams: Record<string, string>;
    data: unknown;
    urlOriginal: string;
    headers: Record<string, string> | null;
    headersOriginal?: unknown;
    headersResponse: Headers;
    is404: boolean | null;
    isClientSideNavigation: boolean;
    abortReason?: unknown;
    abortStatusCode?: import("../../shared/route/abort.js").AbortStatusCode;
    errorWhileRendering?: unknown;
    pageId: string | null;
    from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
    source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
    sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
    url: string;
    pageExports: Record<string, unknown>;
    isBaseMissing?: true;
}> & Pick<PageContextConfig & {
    isPageContext: true;
    Page: import("../../types/Config.js").Config["Page"];
    routeParams: Record<string, string>;
    data: unknown;
    urlOriginal: string;
    headers: Record<string, string> | null;
    headersOriginal?: unknown;
    headersResponse: Headers;
    is404: boolean | null;
    isClientSideNavigation: boolean;
    abortReason?: unknown;
    abortStatusCode?: import("../../shared/route/abort.js").AbortStatusCode;
    errorWhileRendering?: unknown;
    pageId: string | null;
    from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
    source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
    sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
    url: string;
    pageExports: Record<string, unknown>;
    isBaseMissing?: true;
}, "exports" | "pageId" | "pageExports" | "config" | "Page" | "data" | "source" | "sources" | "from" | "configEntries" | "exportsAll" | "routeParams" | "abortReason"> & {
    isClientSide: true;
    isPrerendering: false;
} & {
    isHydration: boolean;
    isBackwardNavigation: boolean | null;
    previousPageContext: import("../../types/PageContext.js").PageContextClient<unknown> | null;
    globalContext: import("./getGlobalContextClientInternal.js").GlobalContextClient;
} & {
    urlOriginal: string;
} & {
    urlParsed: import("./utils.js").UrlPublic;
    urlPathname: string;
    url: string;
}, ("globalContext" | "Page" | "data") | "previousPageContext"> & {
    previousPageContext: {
        pageId: string;
    } | null;
} & {
    urlOriginal: string;
}>;
type PageContextExecHookClient = PageContextConfig & PageContextForPublicUsageClient;
declare function execHookClient(hookName: HookName, pageContext: PageContextExecHookClient): Promise<(import("../../shared/hooks/getHook.js").HookLoc & {
    hookFn: (arg: import("../../shared/preparePageContextForPublicUsage.js").PageContextPrepareMinimum | import("../../shared/prepareGlobalContextForPublicUsage.js").GlobalContextPrepareMinimum) => unknown;
    hookTimeout: import("../../shared/hooks/getHook.js").HookTimeout;
} & {
    hookReturn: unknown;
})[]>;
declare function setPageContextInitIsPassedToClient(pageContext: Record<string, unknown>): void;
