export { renderPageClientSide };
export { getRenderCount };
export { disableClientRouting };
export { firstRenderStartPromise };
export { getPageContextClient };
export type { PageContextBegin };
import { type PageContextFromRewrite } from '../../shared/route/abort.js';
import { type ScrollTarget } from './setScrollPosition.js';
import type { PageContextConfig } from '../../shared/getPageFiles.js';
import type { PageContextClient, PageContextInternalClient } from '../../types/PageContext.js';
import type { VikeGlobalInternal } from '../../types/VikeGlobalInternal.js';
declare const firstRenderStartPromise: Promise<void>;
type PageContextRouted = {
    pageId: string;
    routeParams: Record<string, string>;
};
type PageContextBegin = Awaited<ReturnType<typeof getPageContextBegin>>;
type RenderArgs = {
    scrollTarget: ScrollTarget;
    isBackwardNavigation: boolean | null;
    urlOriginal?: string;
    overwriteLastHistoryEntry?: boolean;
    pageContextsFromRewrite?: PageContextFromRewrite[];
    redirectCount?: number;
    doNotRenderIfSamePage?: boolean;
    isClientSideNavigation?: boolean;
    pageContextInitClient?: Record<string, unknown>;
};
declare function renderPageClientSide(renderArgs: RenderArgs): Promise<void>;
declare function getPageContextBegin(isForErrorPage: boolean, { urlOriginal, isBackwardNavigation, pageContextsFromRewrite, isClientSideNavigation, pageContextInitClient, isFirstRender, }: {
    urlOriginal: string;
    isBackwardNavigation: boolean | null;
    pageContextsFromRewrite: PageContextFromRewrite[];
    isClientSideNavigation: boolean;
    pageContextInitClient: Record<string, unknown> | undefined;
    isFirstRender: boolean;
}): Promise<{
    _isOriginalObject: true;
    isPageContext: true;
} & {
    isClientSide: true;
    isPrerendering: false;
    urlOriginal: string;
    _globalContext: {
        _globalConfigPublic: {
            pages: {
                [k: string]: {
                    config: import("../../types/index.js").ConfigResolved;
                    _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                    _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                    _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
                } & ({
                    route: import("../../types/Config.js").Route;
                    isErrorPage?: undefined;
                } | {
                    route?: undefined;
                    isErrorPage: true;
                });
            };
            config: import("../../types/index.js").ConfigResolved;
            _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        };
        pages: {
            [k: string]: {
                config: import("../../types/index.js").ConfigResolved;
                _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
            } & ({
                route: import("../../types/Config.js").Route;
                isErrorPage?: undefined;
            } | {
                route?: undefined;
                isErrorPage: true;
            });
        };
        config: import("../../types/index.js").ConfigResolved;
        _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        isGlobalContext: true;
        _isOriginalObject: true;
        _virtualFileExportsGlobalEntry: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../types/PageConfig.js").PageConfigRuntime[];
        _pageConfigGlobal: import("../../types/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
    } & {
        isClientSide: true;
    } & {
        _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    };
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _urlHandler: null;
    _urlRewrite: null | string;
    _baseServer: string;
} & {
    urlParsed: import("./utils.js").UrlPublic;
    urlPathname: string;
    url: string;
} & import("../../shared/page-configs/resolveVikeConfigPublic.js").GlobalConfigPublic & {
    isBackwardNavigation: boolean | null;
    isClientSideNavigation: boolean;
    isHydration: boolean;
    previousPageContext: ({
        pageId: string;
    } & PageContextConfig & PageContextRouted & import("../../shared/preparePageContextForPublicUsage.js").PageContextPrepareMinimum & PageContextInternalClient & Omit<Partial<PageContextConfig & {
        isPageContext: true;
        Page: import("../../types/Config.js").Config["Page"];
        routeParams: Record<string, string>;
        data: unknown;
        urlOriginal: string;
        headers: Record<string, string> | null;
        headersOriginal?: unknown;
        headersResponse: Headers;
        is404: boolean | null;
        isClientSideNavigation: boolean;
        abortReason?: unknown;
        abortStatusCode?: import("../../shared/route/abort.js").AbortStatusCode;
        errorWhileRendering?: unknown;
        pageId: string | null;
        from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        url: string;
        pageExports: Record<string, unknown>;
        isBaseMissing?: true;
    }> & Pick<PageContextConfig & {
        isPageContext: true;
        Page: import("../../types/Config.js").Config["Page"];
        routeParams: Record<string, string>;
        data: unknown;
        urlOriginal: string;
        headers: Record<string, string> | null;
        headersOriginal?: unknown;
        headersResponse: Headers;
        is404: boolean | null;
        isClientSideNavigation: boolean;
        abortReason?: unknown;
        abortStatusCode?: import("../../shared/route/abort.js").AbortStatusCode;
        errorWhileRendering?: unknown;
        pageId: string | null;
        from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        url: string;
        pageExports: Record<string, unknown>;
        isBaseMissing?: true;
    }, "exports" | "pageId" | "pageExports" | "config" | "Page" | "data" | "source" | "sources" | "from" | "configEntries" | "exportsAll" | "routeParams" | "abortReason"> & {
        isClientSide: true;
        isPrerendering: false;
    } & {
        isHydration: boolean;
        isBackwardNavigation: boolean | null;
        previousPageContext: PageContextClient<unknown> | null;
        globalContext: import("./getGlobalContextClientInternal.js").GlobalContextClient;
    } & {
        urlOriginal: string;
    } & {
        urlParsed: import("./utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    }, ("globalContext" | "Page" | "data") | "previousPageContext"> & {
        previousPageContext: {
            pageId: string;
        } | null;
    } & {
        urlOriginal: string;
    }) | null;
}>;
declare global {
    var _vike: VikeGlobalInternal;
}
declare function disableClientRouting(err: unknown, log: boolean): void;
declare function getRenderCount(): number;
/**
 * Get the `pageContext` object on the client-side.
 *
 * https://vike.dev/getPageContextClient
 */
declare function getPageContextClient(): PageContextClient | null;
