export { getGlobalContextClientInternal };
export type { GlobalContextClientWithServerRouting };
export type { GlobalContextClientInternalWithServerRouting };
import type { GlobalContextBasePublic } from '../../shared/createGlobalContextShared.js';
type GlobalContextClientWithServerRouting = GlobalContextBasePublic & Pick<GlobalContextClientInternalWithServerRouting, 'isClientSide'> & Vike.GlobalContext & Vike.GlobalContextClient & {};
type GlobalContextClientInternalWithServerRouting = Awaited<ReturnType<typeof getGlobalContextClientInternal>>;
declare function getGlobalContextClientInternal(): Promise<{
    _globalConfigPublic: {
        pages: {
            [k: string]: {
                config: import("../../types/index.js").ConfigResolved;
                _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
            } & ({
                route: import("../../types/Config.js").Route;
                isErrorPage?: undefined;
            } | {
                route?: undefined;
                isErrorPage: true;
            });
        };
        config: import("../../types/index.js").ConfigResolved;
        _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
    };
    pages: {
        [k: string]: {
            config: import("../../types/index.js").ConfigResolved;
            _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        } & ({
            route: import("../../types/Config.js").Route;
            isErrorPage?: undefined;
        } | {
            route?: undefined;
            isErrorPage: true;
        });
    };
    config: import("../../types/index.js").ConfigResolved;
    _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
    _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
    _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
    isGlobalContext: true;
    _isOriginalObject: true;
    _virtualFileExportsGlobalEntry: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../types/PageConfig.js").PageConfigRuntime[];
    _pageConfigGlobal: import("../../types/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
} & {
    isClientSide: true;
}>;
