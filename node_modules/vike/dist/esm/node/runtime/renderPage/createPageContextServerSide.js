export { createPageContextServerSide };
export { createPageContextServerSideWithoutGlobalContext };
import { assert, assertUsage, assertWarning, updateType, normalizeHeaders, objectAssign } from '../utils.js';
import { getPageContextUrlComputed } from '../../../shared/getPageContextUrlComputed.js';
import { createPageContextObject, createPageContextShared } from '../../../shared/createPageContextShared.js';
function createPageContextServerSide(pageContextInit, globalContext, args) {
    assert(pageContextInit.urlOriginal);
    const pageContextCreated = createPageContext(pageContextInit, args.isPrerendering);
    objectAssign(pageContextCreated, {
        _globalContext: globalContext,
        _pageFilesAll: globalContext._pageFilesAll, // TO-DO/next-major-release: remove
        // We use pageContext._baseServer and pageContext._baseAssets instead of pageContext._globalContext.baseServer and pageContext._globalContext.baseAssets because the Base URLs can (eventually one day if needed) be made non-global
        _baseServer: globalContext.baseServer,
        _baseAssets: globalContext.baseAssets,
        _pageContextInit: pageContextInit,
        _urlRewrite: null,
        _urlHandler: args.ssr?.urlHandler ?? null,
        isClientSideNavigation: args.ssr?.isClientSideNavigation ?? false,
    });
    objectAssign(pageContextCreated, globalContext._globalConfigPublic);
    // pageContext.urlParsed
    const pageContextUrlComputed = getPageContextUrlComputed(pageContextCreated);
    objectAssign(pageContextCreated, pageContextUrlComputed);
    // pageContext.headers
    {
        let headers;
        if (pageContextInit.headersOriginal) {
            headers = normalizeHeaders(pageContextInit.headersOriginal);
            assertUsage(!('headers' in pageContextInit), "You're defining pageContextInit.headersOriginal as well as pageContextInit.headers but you should only define pageContextInit.headersOriginal instead, see https://vike.dev/headers");
        }
        else if (pageContextInit.headers) {
            headers = pageContextInit.headers;
            // TO-DO/next-major-release: remove
            assertWarning(false, 'Setting pageContextInit.headers is deprecated: set pageContextInit.headersOriginal instead, see https://vike.dev/headers', { onlyOnce: true });
        }
        else {
            headers = null;
        }
        objectAssign(pageContextCreated, { headers });
    }
    const pageContextAugmented = createPageContextShared(pageContextCreated, globalContext._globalConfigPublic);
    updateType(pageContextCreated, pageContextAugmented);
    return pageContextCreated;
}
function createPageContextServerSideWithoutGlobalContext(pageContextInit) {
    const pageContext = createPageContext(pageContextInit, false);
    return pageContext;
}
function createPageContext(pageContextInit, isPrerendering) {
    const pageContext = createPageContextObject();
    objectAssign(pageContext, {
        isClientSide: false,
        isPrerendering,
    });
    objectAssign(pageContext, pageContextInit);
    return pageContext;
}
