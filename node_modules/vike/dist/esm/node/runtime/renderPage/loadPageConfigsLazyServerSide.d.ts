export { loadPageConfigsLazyServerSide };
export type { PageContext_loadPageConfigsLazyServerSide };
export type { PageConfigsLazy };
export type { PageContextAfterPageEntryLoaded };
import { type PageContextConfig } from '../../../shared/getPageFiles.js';
import { PromiseType } from '../utils.js';
import { type PageAsset } from './getPageAssets.js';
import type { PageConfigRuntime } from '../../../types/PageConfig.js';
import type { PassToClient } from './html/serializeContext.js';
import type { PageContextAfterRoute } from '../../../shared/route/index.js';
import type { PageContextCreated } from './createPageContextServerSide.js';
type PageContext_loadPageConfigsLazyServerSide = PageContextCreated & PageContextAfterRoute & {
    is404: boolean | null;
    pageId: string;
};
type PageConfigsLazy = PromiseType<ReturnType<typeof loadPageConfigsLazyServerSide>>;
declare function loadPageConfigsLazyServerSide(pageContext: PageContext_loadPageConfigsLazyServerSide): Promise<{
    _isOriginalObject: true;
    isPageContext: true;
} & {
    isClientSide: false;
    isPrerendering: boolean;
} & Pick<import("../../../types/PageContext.js").PageContextInternalServer, "urlOriginal" | "headersOriginal"> & {
    url?: string;
    headers?: Record<string, string>;
} & {
    _globalContext: ({
        _globalConfigPublic: {
            pages: {
                [k: string]: {
                    config: import("../../../types/index.js").ConfigResolved;
                    _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                    _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                    _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
                } & ({
                    route: import("../../../types/Config.js").Route;
                    isErrorPage?: undefined;
                } | {
                    route?: undefined;
                    isErrorPage: true;
                });
            };
            config: import("../../../types/index.js").ConfigResolved;
            _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
        };
        pages: {
            [k: string]: {
                config: import("../../../types/index.js").ConfigResolved;
                _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
            } & ({
                route: import("../../../types/Config.js").Route;
                isErrorPage?: undefined;
            } | {
                route?: undefined;
                isErrorPage: true;
            });
        };
        config: import("../../../types/index.js").ConfigResolved;
        _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
        isGlobalContext: true;
        _isOriginalObject: true;
        _virtualFileExportsGlobalEntry: unknown;
        _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: PageConfigRuntime[];
        _pageConfigGlobal: import("../../../types/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
    } & (({
        _isProduction: false;
        _isPrerendering: false;
        assetsManifest: null;
        _viteDevServer: import("vite").ViteDevServer | undefined;
        viteConfig: import("vite").ResolvedConfig | undefined;
        isClientSide: false;
        _pageRoutes: import("../../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
    } | {
        _isPrerendering: true;
        viteConfig: import("vite").ResolvedConfig;
        _isProduction: true;
        assetsManifest: import("../../../types/ViteManifest.js").ViteManifest;
        _viteDevServer: null;
        _usesClientRouter: boolean;
        isClientSide: false;
        _pageRoutes: import("../../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
    } | {
        _isPrerendering: false;
        viteConfig: null;
        _isProduction: true;
        assetsManifest: import("../../../types/ViteManifest.js").ViteManifest;
        _viteDevServer: null;
        _usesClientRouter: boolean;
        isClientSide: false;
        _pageRoutes: import("../../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
    }) & {
        baseServer: string;
        baseAssets: string;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
    })) & {
        prerenderContext: import("../../prerender/runPrerender.js").PrerenderContextPublic | undefined;
    };
    _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
    _baseServer: string;
    _baseAssets: string;
    _pageContextInit: import("../renderPage.js").PageContextInit;
    _urlRewrite: null;
    _urlHandler: ((url: string) => string) | null;
    isClientSideNavigation: boolean;
} & {
    pages: {
        [k: string]: {
            config: import("../../../types/index.js").ConfigResolved;
            _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
        } & ({
            route: import("../../../types/Config.js").Route;
            isErrorPage?: undefined;
        } | {
            route?: undefined;
            isErrorPage: true;
        });
    };
    config: import("../../../types/index.js").ConfigResolved;
    _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
    _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
    _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
} & {
    urlParsed: import("../utils.js").UrlPublic;
    urlPathname: string;
    url: string;
} & {
    headers: Record<string, string> | null;
} & PageContextAfterRoute & {
    is404: boolean | null;
    pageId: string;
} & {
    _pageConfig: PageConfigRuntime | null;
} & PageContextConfig & {
    _pageConfig: null | PageConfigRuntime;
} & {
    cspNonce: string | null;
} & {
    Page: unknown;
    _isHtmlOnly: boolean;
    _passToClient: PassToClient;
} & {
    headersResponse: Headers;
} & {
    __getPageAssets: () => Promise<PageAsset[]>;
}>;
type PageContextAfterPageEntryLoaded = PageContext_loadPageConfigsLazyServerSide & {
    _pageConfig: null | PageConfigRuntime;
} & PageContextConfig;
