export { renderPageAfterRoute };
export { prerenderPage };
export type { PageContextAfterRender };
import { type PageContextUrlInternal } from '../../../shared/getPageContextUrlComputed.js';
import { HttpResponse } from './createHttpResponse.js';
import { PageContext_loadPageConfigsLazyServerSide, type PageConfigsLazy } from './loadPageConfigsLazyServerSide.js';
import type { PageContextCreated } from './createPageContextServerSide.js';
import type { PageContextBegin } from '../renderPage.js';
type PageContextAfterRender = {
    httpResponse: HttpResponse;
    errorWhileRendering: null | Error;
};
declare function renderPageAfterRoute<PageContext extends {
    pageId: string;
    _pageContextAlreadyProvidedByOnPrerenderHook?: true;
    is404: null | boolean;
    routeParams: Record<string, string>;
    errorWhileRendering: null | Error;
    _httpRequestId: number;
} & PageContextCreated & PageContextBegin & PageContextUrlInternal & PageContext_loadPageConfigsLazyServerSide>(pageContext: PageContext): Promise<PageContext & PageContextAfterRender>;
declare function prerenderPage(pageContext: PageContextCreated & PageConfigsLazy & {
    routeParams: Record<string, string>;
    pageId: string;
    _urlRewrite: null;
    _httpRequestId: number | null;
    _usesClientRouter: boolean;
    _pageContextAlreadyProvidedByOnPrerenderHook?: true;
    is404: boolean;
}): Promise<{
    documentHtml: string;
    pageContextSerialized: null;
    pageContext: {
        _isOriginalObject: true;
        isPageContext: true;
    } & {
        isClientSide: false;
        isPrerendering: boolean;
    } & Pick<import("../../../types/PageContext.js").PageContextInternalServer, "urlOriginal" | "headersOriginal"> & {
        url?: string;
        headers?: Record<string, string>;
    } & {
        _globalContext: ({
            _globalConfigPublic: {
                pages: {
                    [k: string]: {
                        config: import("../../../types/index.js").ConfigResolved;
                        _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                        _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                        _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
                    } & ({
                        route: import("../../../types/Config.js").Route;
                        isErrorPage?: undefined;
                    } | {
                        route?: undefined;
                        isErrorPage: true;
                    });
                };
                config: import("../../../types/index.js").ConfigResolved;
                _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
            };
            pages: {
                [k: string]: {
                    config: import("../../../types/index.js").ConfigResolved;
                    _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                    _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                    _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
                } & ({
                    route: import("../../../types/Config.js").Route;
                    isErrorPage?: undefined;
                } | {
                    route?: undefined;
                    isErrorPage: true;
                });
            };
            config: import("../../../types/index.js").ConfigResolved;
            _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
            isGlobalContext: true;
            _isOriginalObject: true;
            _virtualFileExportsGlobalEntry: unknown;
            _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
            _pageConfigs: import("../../../types/PageConfig.js").PageConfigRuntime[];
            _pageConfigGlobal: import("../../../types/PageConfig.js").PageConfigGlobalRuntime;
            _allPageIds: string[];
        } & (({
            _isProduction: false;
            _isPrerendering: false;
            assetsManifest: null;
            _viteDevServer: import("vite").ViteDevServer | undefined;
            viteConfig: import("vite").ResolvedConfig | undefined;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        } | {
            _isPrerendering: true;
            viteConfig: import("vite").ResolvedConfig;
            _isProduction: true;
            assetsManifest: import("../../../types/ViteManifest.js").ViteManifest;
            _viteDevServer: null;
            _usesClientRouter: boolean;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        } | {
            _isPrerendering: false;
            viteConfig: null;
            _isProduction: true;
            assetsManifest: import("../../../types/ViteManifest.js").ViteManifest;
            _viteDevServer: null;
            _usesClientRouter: boolean;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        }) & {
            baseServer: string;
            baseAssets: string;
            viteConfigRuntime: {
                root: string;
                build: {
                    outDir: string;
                };
                _baseViteOriginal: string;
                vitePluginServerEntry: {
                    inject: boolean | undefined;
                };
            };
        })) & {
            prerenderContext: import("../../prerender/runPrerender.js").PrerenderContextPublic | undefined;
        };
        _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
        _baseServer: string;
        _baseAssets: string;
        _pageContextInit: import("../renderPage.js").PageContextInit;
        _urlRewrite: null;
        _urlHandler: ((url: string) => string) | null;
        isClientSideNavigation: boolean;
    } & {
        pages: {
            [k: string]: {
                config: import("../../../types/index.js").ConfigResolved;
                _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
            } & ({
                route: import("../../../types/Config.js").Route;
                isErrorPage?: undefined;
            } | {
                route?: undefined;
                isErrorPage: true;
            });
        };
        config: import("../../../types/index.js").ConfigResolved;
        _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
    } & {
        urlParsed: import("../utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    } & {
        headers: Record<string, string> | null;
    } & import("../../../shared/route/index.js").PageContextAfterRoute & {
        is404: boolean | null;
        pageId: string;
    } & {
        _pageConfig: import("../../../types/PageConfig.js").PageConfigRuntime | null;
    } & import("../../../shared/getPageFiles.js").PageContextConfig & {
        _pageConfig: null | import("../../../types/PageConfig.js").PageConfigRuntime;
    } & {
        cspNonce: string | null;
    } & {
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: import("./html/serializeContext.js").PassToClient;
    } & {
        headersResponse: Headers;
    } & {
        __getPageAssets: () => Promise<import("./getPageAssets.js").PageAsset[]>;
    } & {
        routeParams: Record<string, string>;
        pageId: string;
        _urlRewrite: null;
        _httpRequestId: number | null;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true;
        is404: boolean;
    } & {
        _isPageContextJsonRequest: null;
    };
} | {
    documentHtml: string;
    pageContextSerialized: string;
    pageContext: {
        _isOriginalObject: true;
        isPageContext: true;
    } & {
        isClientSide: false;
        isPrerendering: boolean;
    } & Pick<import("../../../types/PageContext.js").PageContextInternalServer, "urlOriginal" | "headersOriginal"> & {
        url?: string;
        headers?: Record<string, string>;
    } & {
        _globalContext: ({
            _globalConfigPublic: {
                pages: {
                    [k: string]: {
                        config: import("../../../types/index.js").ConfigResolved;
                        _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                        _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                        _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
                    } & ({
                        route: import("../../../types/Config.js").Route;
                        isErrorPage?: undefined;
                    } | {
                        route?: undefined;
                        isErrorPage: true;
                    });
                };
                config: import("../../../types/index.js").ConfigResolved;
                _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
            };
            pages: {
                [k: string]: {
                    config: import("../../../types/index.js").ConfigResolved;
                    _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                    _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                    _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
                } & ({
                    route: import("../../../types/Config.js").Route;
                    isErrorPage?: undefined;
                } | {
                    route?: undefined;
                    isErrorPage: true;
                });
            };
            config: import("../../../types/index.js").ConfigResolved;
            _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
            isGlobalContext: true;
            _isOriginalObject: true;
            _virtualFileExportsGlobalEntry: unknown;
            _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
            _pageConfigs: import("../../../types/PageConfig.js").PageConfigRuntime[];
            _pageConfigGlobal: import("../../../types/PageConfig.js").PageConfigGlobalRuntime;
            _allPageIds: string[];
        } & (({
            _isProduction: false;
            _isPrerendering: false;
            assetsManifest: null;
            _viteDevServer: import("vite").ViteDevServer | undefined;
            viteConfig: import("vite").ResolvedConfig | undefined;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        } | {
            _isPrerendering: true;
            viteConfig: import("vite").ResolvedConfig;
            _isProduction: true;
            assetsManifest: import("../../../types/ViteManifest.js").ViteManifest;
            _viteDevServer: null;
            _usesClientRouter: boolean;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        } | {
            _isPrerendering: false;
            viteConfig: null;
            _isProduction: true;
            assetsManifest: import("../../../types/ViteManifest.js").ViteManifest;
            _viteDevServer: null;
            _usesClientRouter: boolean;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        }) & {
            baseServer: string;
            baseAssets: string;
            viteConfigRuntime: {
                root: string;
                build: {
                    outDir: string;
                };
                _baseViteOriginal: string;
                vitePluginServerEntry: {
                    inject: boolean | undefined;
                };
            };
        })) & {
            prerenderContext: import("../../prerender/runPrerender.js").PrerenderContextPublic | undefined;
        };
        _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
        _baseServer: string;
        _baseAssets: string;
        _pageContextInit: import("../renderPage.js").PageContextInit;
        _urlRewrite: null;
        _urlHandler: ((url: string) => string) | null;
        isClientSideNavigation: boolean;
    } & {
        pages: {
            [k: string]: {
                config: import("../../../types/index.js").ConfigResolved;
                _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
                _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
                _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
            } & ({
                route: import("../../../types/Config.js").Route;
                isErrorPage?: undefined;
            } | {
                route?: undefined;
                isErrorPage: true;
            });
        };
        config: import("../../../types/index.js").ConfigResolved;
        _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
    } & {
        urlParsed: import("../utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    } & {
        headers: Record<string, string> | null;
    } & import("../../../shared/route/index.js").PageContextAfterRoute & {
        is404: boolean | null;
        pageId: string;
    } & {
        _pageConfig: import("../../../types/PageConfig.js").PageConfigRuntime | null;
    } & import("../../../shared/getPageFiles.js").PageContextConfig & {
        _pageConfig: null | import("../../../types/PageConfig.js").PageConfigRuntime;
    } & {
        cspNonce: string | null;
    } & {
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: import("./html/serializeContext.js").PassToClient;
    } & {
        headersResponse: Headers;
    } & {
        __getPageAssets: () => Promise<import("./getPageAssets.js").PageAsset[]>;
    } & {
        routeParams: Record<string, string>;
        pageId: string;
        _urlRewrite: null;
        _httpRequestId: number | null;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true;
        is404: boolean;
    } & {
        _isPageContextJsonRequest: null;
    };
}>;
